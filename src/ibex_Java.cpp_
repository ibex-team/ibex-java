//============================================================================
//                                  I B E X                                   
// File        : Ibex.cpp
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Jul 18, 2012
// Last Update : Jul 18, 2012
//============================================================================

#include "ibex_CtcCompo.h"
#include "ibex_CtcHC4.h"
#include "ibex_CtcNewton.h"
#include "ibex_CtcFwdBwd.h"
#include "ibex_CtcInteger.h"
#include "ibex_CtcUnion.h"
#include "ibex_CtcIdentity.h"
#include "ibex_SyntaxError.h"
#include "ibex_System.h"
//#include "Ibex.h_"
#include <stdio.h>
#include <vector>

using namespace std;
using namespace ibex;

static vector<System*> sys;
static vector<Ctc*> ctc;
static vector<Ctc*> neg; // contractor for the negation
static vector<int> options;  // which contractor is used for the ith constraint?

enum { COMPO=0, HC4=1, HC4_NEWTON=2, INTEGER=3 };

enum { FAIL=0, ENTAILED=1, CONTRACT=2, NOTHING=3,
	   NOT_SIGNIFICANT=4, INFLATE=5, FULL_INFLATE=6, BAD_POINT=7, UNKNOWN_POINT=8
};

enum { FALSE_=0, TRUE_=1, FALSE_OR_TRUE=2 };

static const double EPS_CONTRACT=0.01;

namespace {

vector<Ctc*> ptrs;

Ctc* rec(Ctc* ptr) { ptrs.push_back(ptr); return ptr; }

void clean_ctc() {
	for (vector<Ctc*>::iterator it=ptrs.begin(); it!=ptrs.end(); it++) {
		delete *it;
	}
	ptrs.clear();
}

}


Ctc* negation(const NumConstraint& c) {
	if (c.op==EQ) {
                /** 
                 * OPTIMIZATION: discard negation in case of equality
                 */
		return rec(new CtcIdentity(c.f.nb_var()));
		//return rec(new CtcUnion(*rec(new CtcFwdBwd(c.f, LT)), *rec(new CtcFwdBwd(c.f, GT))));
        }
	else
		return rec(new CtcFwdBwd(c.f, !c.op));
}

JNIEXPORT void JNICALL Java_Ibex_add_1ctr__ILjava_lang_String_2I(JNIEnv *env, jobject, jint nb_var, jstring syntax, jint option) {
	const char* _syntax = env->GetStringUTFChars(syntax,0);
	//cout << " [ibex] new constraint:" << _syntax << " nb var=" << nb_var << " option=" << option << endl;
	System* s;

	try {
		s=new System(nb_var,_syntax);
	} catch(SyntaxError& e) {
		cerr << e << endl;
		exit(1);
	}
//	cout << " system built:" << *s << endl;
	sys.push_back(s);
	options.push_back(option);

	if (s->nb_ctr==1) {
		ctc.push_back(rec(new CtcFwdBwd(s->ctrs[0])));
		neg.push_back(negation(s->ctrs[0]));
	} else {
		Ctc* c;

		switch (option) {
		case COMPO:      {
			Array<Ctc> array(s->nb_ctr);
			for (int i=0; i<s->nb_ctr; i++) {
				array.set_ref(i,*rec(new CtcFwdBwd(s->ctrs[i])));
			}
			c=rec(new CtcCompo(array));
			break;
		}
		case HC4:
			c=rec(new CtcHC4(s->ctrs));
			break;
		case HC4_NEWTON:
			c=rec(new CtcCompo(*rec(new CtcHC4(s->ctrs)), *rec(new CtcNewton(s->f))));
			break;
		default:
			not_implemented("unimplemented option");
			break;
		}

		ctc.push_back(c);

		// in all cases, the negation is a simple union of forward-backward
		Array<Ctc> neg_array(s->nb_ctr);
		for (int i=0; i<s->nb_ctr; i++) {
			neg_array.set_ref(i,*negation(s->ctrs[i]));
		}
		neg.push_back(rec(new CtcUnion(neg_array)));
	}
	//cout << " [ibex] add_ctr done.\n";
}


JNIEXPORT void JNICALL Java_Ibex_add_1ctr__ILjava_lang_String_2(JNIEnv *env, jobject o, jint nb_var, jstring syntax) {
	Java_Ibex_add_1ctr__ILjava_lang_String_2I(env,o,nb_var,syntax,COMPO);
}

JNIEXPORT void JNICALL Java_Ibex_add_1int_1ctr(JNIEnv *env, jobject o, jint nb_var) {
	sys.push_back(NULL);
	options.push_back(INTEGER);
	BitSet is_int(BitSet::all(nb_var));

	ctc.push_back(rec(new CtcInteger(nb_var,is_int)));
	neg.push_back(rec(new CtcIdentity(nb_var)));
}

static void read_box(JNIEnv *env, const jdouble* d, jint size, IntervalVector& box) {

	assert(size%2==0);
	int nb_var=size/2;

	assert(box.size()==nb_var);

	for (int i=0; i<nb_var; i++) {
		box[i]=Interval(d[2*i],d[2*i+1]);
	}
}

static void write_box(JNIEnv *env, const IntervalVector& box, jdouble* d) {

	for (int i=0; i<box.size(); i++) {
		d[2*i]=box[i].lb();
		d[2*i+1]=box[i].ub();
	}
}

JNIEXPORT jint JNICALL Java_Ibex_contract__I_3DI(JNIEnv *env, jobject, jint n, jdoubleArray domains, jint reif) {
	jboolean isCopy;
	jdouble* d = env->GetDoubleArrayElements(domains, &isCopy);
	//cout << "is copy? " << isCopy << endl;
	jint size  = env->GetArrayLength(domains);
	jint result = NOTHING; // by default

	IntervalVector box(size/2); // warning: sys[n]==NULL for INTEGER
	read_box(env,d,size,box);

	IntervalVector savebox(box);
	//cout << " [ibex] contract nÂ°" << n << " with box=" << box << endl;
	if (reif==TRUE_ || reif==FALSE_OR_TRUE) {

		ctc[n]->contract(box);

		if (box.is_empty()) {
			//cout << " [ibex] emtpybox --> FAILED\n";
			result=FAIL;
		}

		else {
			if (reif==TRUE_ && savebox.rel_distance(box) >= EPS_CONTRACT) {

				//cout << " [ibex] --> CONTRACT to " << box << "\n";
				savebox = box;
				result=CONTRACT; // temporary assignment (final result may be ENTAILED)
			}

			//cout << " [ibex] try negation.\n";
			neg[n]->contract(box);

			if (box.is_empty()) {
				//cout << " [ibex] emtpybox --> ENTAILED\n";
				result=ENTAILED;
			}
			else if (result==CONTRACT) {
				//cout << " [ibex] nothing --> CONTRACT to " << savebox << "\n";
				write_box(env,savebox,d);
			}
		}
	}

	if (reif==FALSE_OR_TRUE) box=savebox;

	if (reif==FALSE_ || reif==FALSE_OR_TRUE) {

		neg[n]->contract(box);

		if (box.is_empty()) {
			result=ENTAILED;
		} else {

			if (reif==FALSE_ && savebox.rel_distance(box) >= EPS_CONTRACT) {
				savebox = box;
				result=CONTRACT; // temporary assignment (final result may be FAIL)
			}

			ctc[n]->contract(box);

			if (box.is_empty()) {
				result=FAIL;
			} else if (result==CONTRACT) {
				write_box(env,savebox,d);
			}
		}
	}

	//cout << " [ibex] before release.\n";	
	env->ReleaseDoubleArrayElements(domains, d, 0);
	//cout << " [ibex] contract done.\n";
	return result;
}

JNIEXPORT jint JNICALL Java_Ibex_contract__I_3D(JNIEnv *env, jobject o, jint n, jdoubleArray domains) {
	return Java_Ibex_contract__I_3DI(env,o,n,domains,1);
}


// either return BAD_POINT, UNKNOWN_POINT or INFLATE (the latter case also corresponds to the NOT_SIGNIFICANT case)
jint inflate(NumConstraint& ctr, const IntervalVector& xin, IntervalVector& x, jboolean in) {
	jint result;

	Interval yin=ctr.f.eval(xin);

	if (ctr.op==EQ) {
		// we check this is not a vector-valued constraint
		assert(ctr.f.image_dim()==1);
		// the only thing we can do is to check "p"
		if (yin==Interval::ZERO) result=INFLATE;
		else result=UNKNOWN_POINT;
		x=xin;
	} else {
		Interval y;

		switch (ctr.op) {
		case LT:  y = in? Interval(NEG_INFINITY,ibex::previous_float(0)) : Interval::POS_REALS; break;
		case LEQ: y = in? Interval::NEG_REALS : Interval(ibex::next_float(0),POS_INFINITY); break;
		case GEQ: y = in? Interval::POS_REALS : Interval(NEG_INFINITY,ibex::previous_float(0)); break;
		case GT:  y = in? Interval(ibex::next_float(0),POS_INFINITY) : Interval::NEG_REALS; break;
		case EQ:  ibex_error("inflation with equalities"); break;
		}

		if (!yin.is_subset(y)) {
			if ((yin & y).is_empty()) result=BAD_POINT;
			else result=UNKNOWN_POINT;
			x=xin;
		} else {
			ctr.f.ibwd(y,x,xin);
			result=INFLATE;
		}
	}
	return result;
}

JNIEXPORT jint JNICALL Java_Ibex_inflate(JNIEnv *env, jobject, jint n, jdoubleArray p, jdoubleArray X, jboolean in) {

	jint result;

	jboolean isCopy;
	jdouble* d = env->GetDoubleArrayElements(X, &isCopy);
	jint size  = env->GetArrayLength(X);

	jdouble* d2 = env->GetDoubleArrayElements(p, NULL);
	jint size2  = env->GetArrayLength(p);

	IntervalVector x(size/2); // warning: sys[n]==NULL for INTEGER
	read_box(env,d,size,x);

	IntervalVector xin(size/2);
	for (int i=0; i<size/2; i++) xin[i]=d2[i];

	IntervalVector savebox(x);

	if (in) {
		// try first "full inflate" using negation contractor
		// (because of inner rounding, the inflation may
		// fail in entirely proving x is inner so we use
		// the contractor instead)
		neg[n]->contract(x);

		if (x.is_empty())
			result=FULL_INFLATE;
		else
			result=INFLATE; // by default

		x=savebox; // result==FULL_INFLATE => savebox is entirely "inside" this constraint

		if (result!=FULL_INFLATE) {
			// note: in principle, we could also slightly optimize the
			// loop below by using the negation contractor of
			// sub-constraints (to remove the inner rounding effect).
			// But this would bring non significant gain since the
			// result would probably not be FULL_INFLATE in this case.
			for (int i=0; i<sys[n]->ctrs.size(); i++) {
				NumConstraint& ctr=sys[n]->ctrs[i];
				result=inflate(ctr,xin,x,in); // will "contract" x to the inflated box.
				if (result!=INFLATE) break;
			}
		}
	} else {

		// same comments as above
		ctc[n]->contract(x);

		if (x.is_empty())
			result=FULL_INFLATE;
		else
			result=BAD_POINT; // by default

		x=savebox;

		if (result!=FULL_INFLATE) {

			for (int i=0; i<sys[n]->ctrs.size(); i++) {
				NumConstraint& ctr=sys[n]->ctrs[i];

				int r=inflate(ctr,xin,x,in);

				// kind of logical "or" between the results of
				// inflation for of each constraint
				if (r==INFLATE)
					result=INFLATE;
				else if (r==UNKNOWN_POINT && result==BAD_POINT)
					result=UNKNOWN_POINT;

				xin=x;
				x=savebox;
			}

			x=xin;
		}
	}

	//cout << "savebox=" << savebox << " box=" << x << endl;

	if (result==INFLATE) {
		if (savebox.is_subset(x))
			result=FULL_INFLATE;
		else if (savebox.rel_distance(x) <= (1.0-EPS_CONTRACT))
			write_box(env,x,d);
		else
			result=NOT_SIGNIFICANT;
	}

	env->ReleaseDoubleArrayElements(X, d, 0);
	env->ReleaseDoubleArrayElements(p, d2, 0); // 0-->JNI_ABORT since the array was not modified?

	return result;
}

JNIEXPORT void JNICALL Java_Ibex_release(JNIEnv *, jobject) {
	for (unsigned int i=0; i<sys.size(); i++) {
		if (options[i]!=INTEGER) {
			delete sys[i]; // free the system (except if INTEGER)
		}
	}
	clean_ctc();
	sys.clear();
	options.clear();
	ctc.clear();
	neg.clear();
}
